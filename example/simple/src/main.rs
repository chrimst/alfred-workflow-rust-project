use alfred_workflow_rust_project;
use alfred_workflow_rust_project::icon::{BuiltinIcon, Icon};
use alfred_workflow_rust_project::workflow_item::{Action, ActionItem, ItemText, ItemType, Modifier, ModKey, WorkflowItem};

fn main() {
    let mut simple_wf = alfred_workflow_rust_project::workflow::AlfredWorkflow::init();
    simple_wf = simple_wf
        .add_item(WorkflowItem::new("Simple Item")
            .subtitle("The item only has the subTitle"))
        .add_item(WorkflowItem::new("Multi Arg Item")
            .args("~/Desktop")
            .args("~/Documents"))
        .add_item(WorkflowItem::new("Single Arg Item")
            .args("~/Desktop"))
        .add_item(WorkflowItem::new("AutoComplete Item")
            .subtitle("Pressed `Tab` to auto complete the input")
            .auto_complete("The value placed in `auto_complete`"))
        .add_item(WorkflowItem::new("Icon Item")
            .subtitle("Customize the item icon by set icon")
            .icon(BuiltinIcon::ACCOUNT.get_icon()))
        .add_item(WorkflowItem::new("MathEnable Item")
            .subtitle("`match` used to to filter the result")
            .matches("Rust Top One Item"))
        .add_item(WorkflowItem::new("UID1 Item")
            .subtitle("UID often used by alfred to remember the sort")
            .uid("1"))
        .add_item(WorkflowItem::new("UID2 Item")
            .subtitle("UID often used by alfred to remember the sort")
            .uid("2"))
        .add_item(WorkflowItem::new("File Item")
            .subtitle("File-SkipCheck item(ItemType most time make no sense)")
            .args("/Applications/Safari.app")
            .item_type(ItemType::FILE2))
        .add_item(WorkflowItem::new("Invalid Item")
            .subtitle("Alfred do nothing for Invalid Item")
            .auto_complete("Invalid auto complete"))
        .add_item(WorkflowItem::new("Quicklook(URL) Item")
            .quick_look("https://www.taobao.com"))
        .add_item(WorkflowItem::new("Quicklook(PATH) Item")
            .quick_look("~/Desktop"))
        .add_item(WorkflowItem::new("Single Action Item")
            .subtitle("When Show Action: action value will be passed rather than arg")
            .args("single action item arg")
            .actions(Action::SingleItem("Get Info".to_string())))
        .add_item(WorkflowItem::new("Multi Action Item")
            .subtitle("When Show Action: action value will be passed rather than arg")
            .args("multi action item arg")
            .actions(Action::MultiItem(vec!["Email".to_string(), "Get Info".to_string()])))
        .add_item(WorkflowItem::new("Object Action Item")
            .subtitle("When Show Action: action value will be passed rather than arg")
            .args("object action item arg")
            .actions(Action::ObjectItem(ActionItem::new()
                .texts(vec!["one", "two", "three"])
                .auto("~/Pictures")
                .file("~/Desktop")
                .url("https://www.alfredapp.com"))))
        .add_item(WorkflowItem::new("Text Item")
            .subtitle("Use CMD+C to copy value from text and CMD+L to display large text of large_text")
            .text(ItemText::new("Text copy to cliboard")
                .large_text("Text enlarge display")))
        .add_item(WorkflowItem::new("Mod Item")
            .subtitle("Use FN+CMD to trigger new modifer")
            .args("test")
            .mods(vec![ModKey::FN],
                  Modifier::new()
                      .subtitle("Cacual arg && Customiztion Icon Modifier")
                      .icon(BuiltinIcon::INFO.get_icon())
                      .args("casjkdcansdjkc"))
            .mods(vec![ModKey::ALT],
                  Modifier::new()
                      .subtitle("Path Modifier: Two args will be dereived automaticlly")
                      .args("~/Desktop")
                      .args("~/Pictures")))
        .add_item(WorkflowItem::new("Vars Item")
            .subtitle("Use Option + CMD")
            .args("ignore it")
            .vars("test_var", "var defined in item")
            .mods(vec![ModKey::FN],Modifier::new()
                .subtitle("vars defined")
                .args("won't use but must have it")
                .vars("test_var","var defined in mods")));
    simple_wf.send_feedback()
}
